package main

import (
	"bytes"
	"fmt"
	"strings"
)

const (
	amESET   = "ESET"
	amComodo = "Comodo AntiVirus"
	amSophos = "Sophos"
	amClamAV = "Clam AV"

	statusPoor = 2
	statusNone = 0
	statusGood = 1
)

var antiMalwareToService = map[string]string{
	amESET:   "esets.service",
	amSophos: "sav-protect.service",
	amClamAV: "clamav-freshclam.service",
	amComodo: "cmdavd.service",
}

// This function monitors status of a given service.
// The return values are as follows
// StatusGood - if service is active
// Status Poor - if service is installed and not running, or an error occurs when looking for it
// StatusNone - Service is not installed
func GetStatusOfService(serviceName string) (status string) {
	stdout := &bytes.Buffer{}
	stderr := &bytes.Buffer{}

	err := run(stdout, stderr, "", "systemctl", "is-active", serviceName)
	if err != nil {
		fmt.Printf("Unable to get status of %s, error: %s", serviceName, err.Error())
		return statusPoor
	} else {
		lines := strings.TrimSpace(stdout.String())
		if lines == "active" {
			return statusGood
		} else {
			// This command returns inactive for s/w that's not installed too.
			stdout.Reset()
			stderr.Reset()
			err = run(stdout, stderr, "", "systemctl", "status", serviceName)
			if err != nil {
				fmt.Printf("Unable to get status of service %s, error: %s", serviceName, err.Error())
				return statusPoor
			} else {
				lines := strings.TrimSpace(stdout.String())
				if strings.Contains(lines, "could not be found") {
					return statusNone
				} else {
					return statusPoor
				}
			}
		}
	}
}

var antimalwareFailCounter int
var firewallFailCounter int

func setAntiMalware() {

	var antiMalware []*AntiMalware
	status := statusPoor
	amStatus := false

	for app, service := range antiMalwareToService {
		serviceStatus := getStatusOfService(service)
		if serviceStatus != statusNone {
			antiMalware = append(antiMalware, &AntiMalware{
				ProductName:       app,
				Version:           "",
				DefinitionsUpdate: "",
			})
			if serviceStatus == statusGood {
				amStatus = amStatus || true
			} else if serviceStatus == statusPoor {
				amStatus = amStatus || false
			}
		}
	}

	if amStatus {
		status = statusGood
	} else {
		status = statusPoor
	}
}

func setFirewall() {
	stdout := &bytes.Buffer{}
	stderr := &bytes.Buffer{}
	defer stdout.Reset()
	defer stderr.Reset()

	firewall := statusPoor

	err := run(stdout, stderr, "", "/usr/sbin/ufw", "status")
	if err == nil {
		firewallFailCounter = 1

		value := strings.TrimSpace(strings.Split(stdout.String(), ":")[1])
		if value == "active" {
			firewall = statusGood
		}
	} else {
		fmt.Printf("Unable to read the firewall status - %v", err)
		return
	}
}

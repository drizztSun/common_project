"""
338. Counting Bits

Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]
Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.

"""


class CountBits:

    """
        Approach #2 DP + Most Significant Bit [Accepted]
        Intuition

        Use previous count results to generate the count for a new integer.

        Algorithm

        Suppose we have an integer:

        x = (1001011101)_2 = (605)_{10}x=(1001011101)
        2
        ​
         =(605)
        10
        ​


        and we already calculated and stored all the results of 00 to x - 1x−1.

        Then we know that xx is differ by one bit with a number we already calculated:

        x' = (1011101)_2 = (93)_{10}x
        ′
         =(1011101)
        2
        ​
         =(93)
        10
        ​


        They are different only in the most significant bit.

        Let's exam the range [0, 3][0,3] in the binary form:

        (0) = (0)_2(0)=(0)
        2
        ​


        (1) = (1)_2(1)=(1)
        2
        ​


        (2) = (10)_2(2)=(10)
        2
        ​


        (3) = (11)_2(3)=(11)
        2
        ​


        One can see that the binary form of 2 and 3 can be generated by adding 1 bit in front of 0 and 1. Thus, they are different only by 1 regarding pop count.

        Similarly, we can generate the results for [4, 7][4,7] using [0, 3][0,3] as blueprints.

        In general, we have the following transition function for popcount P(x)P(x):

        P(x + b) = P(x) + 1, b = 2^m > xP(x+b)=P(x)+1,b=2
        m
         >x

        With this transition function, we can then apply Dynamic Programming to generate all the pop counts starting from 00.


    """
    def doit_dp(self, num):

        dp = [0 for _ in range(num+1)]

        for i in range(1, num+1):
            # every num is 2 * k + {1, 0}. so D[i] has same 1 or 0 as D[k]
            dp[i] = dp[i//2] + i % 2

        return dp[num]

    def doit_dp_1(self, num):
        if num == 0:
            return [0]
        elif num == 1:
            return [0, 1]

        out = [0, 1]
        k = 2
        while num >= pow(2, k) - 1:
            out += [1 + _ for _ in out]
            k += 1

        rem = num - pow(2, k - 1) + 1
        if rem > 0:
            out += [1 + _ for _ in out[0: rem]]
        return out
